// Mocks generated by Mockito 5.4.3 from annotations
// in route_social_app/test/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:route_social_app/core/network/failure.dart' as _i7;
import 'package:route_social_app/Features/home/domain/entities/comment.dart'
    as _i10;
import 'package:route_social_app/Features/home/domain/entities/post.dart'
    as _i8;
import 'package:route_social_app/Features/home/domain/repositories/repository.dart'
    as _i2;
import 'package:route_social_app/Features/home/domain/use_cases/get_comments.dart'
    as _i9;
import 'package:route_social_app/Features/home/domain/use_cases/get_posts.dart'
    as _i4;
import 'package:route_social_app/Features/home/domain/use_cases/get_users.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomeRepository_0 extends _i1.SmartFake
    implements _i2.HomeRepository {
  _FakeHomeRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetUsersUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUsersUseCase extends _i1.Mock implements _i3.GetUsersUseCase {
  MockGetUsersUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeHomeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.HomeRepository);
}

/// A class which mocks [GetPostsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPostsUseCase extends _i1.Mock implements _i4.GetPostsUseCase {
  MockGetPostsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeHomeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.HomeRepository);

  @override
  _i5.Future<_i6.Either<_i7.Failure, List<_i8.Post>>?>? call(int? params) =>
      (super.noSuchMethod(Invocation.method(
        #call,
        [params],
      )) as _i5.Future<_i6.Either<_i7.Failure, List<_i8.Post>>?>?);
}

/// A class which mocks [GetCommentsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCommentsUseCase extends _i1.Mock
    implements _i9.GetCommentsUseCase {
  MockGetCommentsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeHomeRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.HomeRepository);

  @override
  _i5.Future<_i6.Either<_i7.Failure, List<_i10.Comment>>?>? call(int? params) =>
      (super.noSuchMethod(Invocation.method(
        #call,
        [params],
      )) as _i5.Future<_i6.Either<_i7.Failure, List<_i10.Comment>>?>?);
}
